@page "/departments"

@inject NavigationManager navManager

<h4><b><i>List of Deparments:</i></b></h4>
<hr />
<br />

@try
{
    @if (deptList != null) { 
        <TableTemplate Items="deptList.ToList()" TItem="Data.Models.Department">
            <TableHeader>
                <th scope="col">Code</th>
                <th scope="col">DepartmentName</th>
                <th scope="col">School</th>
                <th scope="col">Actions</th>
            </TableHeader>
            <RowTemplate>
                <td><a href="#">@context.Code</a></td>
                <td>@context.DepartmentName</td>
                <td>@context.School</td>
                <td>
                    <div class="col-8">
                        <span class="col-2"></span>
                        <input type="submit" class="form-control col-4 btn btn-primary" value="Update" @onclick="()=>LoadUpdateDataButton(context.Id)" />
                        <span>&nbsp</span>
                        <input type="submit" class="form-control col-4 btn btn-danger" value="Delete" @onclick="()=>DeleteDepartment(context.Id)" />
                    </div>
                </td>
            </RowTemplate>
        </TableTemplate>
    }
}
catch (Exception)
{
}
<hr />
<br />

<div class="container col-9">
    <h4><b><i>Create new Department:</i></b></h4>
    <hr /><br />

    @try
    {
        <EditForm Model="@department" OnValidSubmit="@SaveDepartment">
            <DataAnnotationsValidator />

            <div class="col-12 row">
                <label class="col-2 font-weight-bold"><i>Code:</i></label>
                <InputText class="form-control col-3" @bind-Value="department.Code" />
                &nbsp;<ValidationMessage For="@(()=>department.Code)" />
            </div>

            <br />

            <div class="col-12 row">
                <label class="col-2 font-weight-bold"><i>Name:</i></label>
                <InputText class="form-control col-3" @bind-Value="department.DepartmentName" />
                &nbsp;<ValidationMessage For="@(()=>department.DepartmentName)" />
            </div>

            <br />

            <div class="col-12 row">
                <label class="col-2 font-weight-bold"><i>School:</i></label>
                <InputText class="form-control col-3" @bind-Value="department.School" />
                &nbsp;<ValidationMessage For="@(()=>department.School)" />
            </div>

            <hr /><br />

            <div class="col-12 row">
                <span class="col-2"></span>
                <input type="submit" class="form-control col-1 btn btn-success" value="Save" />
                <span>&nbsp</span>
                <input type="submit" class="form-control col-1 btn btn-danger" value="Clear" @onclick="ClearData" />
            </div>
            <hr />
        </EditForm>

    }
    catch (Exception)
    {
    }

</div>

@code {

    private BlazorWasmTutorial.Data.Models.Department department = new Data.Models.Department();

    private bool updateMode { get; set; }

    private List<BlazorWasmTutorial.Data.Models.Department> deptList = new List<Data.Models.Department>();

    private DepartmentApi departmentService { get; set; }

    protected async override Task OnInitializedAsync()
    {

        departmentService= new DepartmentApi(new HttpClient());

        await LoadDepartments();

        await base.OnInitializedAsync();
    }

    private async Task LoadDepartments()
    {
        this.deptList = await departmentService.GetDepartments();
    }

    private void ClearData()
    {
        department = new Data.Models.Department();

        updateMode = false;
    }
    private async Task SaveDepartment()
    {

        if (!updateMode)
        {
            await departmentService.PostDepartment(department);
        }
        else
        {
            await departmentService.UpdateDepartment(department);
        }

        ClearData();
        deptList = null;
        await LoadDepartments();
    }

    private void LoadUpdateDataButton(int deptId)
    {
        var smallListDept = deptList.Where(d => d.Id == deptId).ToList();

        var dept = smallListDept[0];

        department.Code = dept.Code;
        department.DepartmentName = dept.DepartmentName;
        department.School = dept.School;
        department.created_at = dept.created_at;
        department.updated_at = DateTime.Now;

        updateMode = true;
    }

    private async Task DeleteDepartment(int deptId)
    {
        await departmentService.DeleteDepartment(deptId);

        deptList = null;

        ClearData();
        await LoadDepartments();
    }
}